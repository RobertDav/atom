startUp()
    1.根据配置参数创建 connectionQuotas (用来限制ip的最大连接数)
    2.创建 acceptors 和processors
      //param1: 在server.properties 中 表示 接受请求 发送response 的线程数，listeners的ip数量
      2.1 createAcceptorAndProcessors(config.numNetworkThreads, config.listeners)
              每一个listener转化为一个endPoint 并且根据endPoint 创建出acceptor acceptor 监听根据endPoint创建的serverSocketChannel
        2.1.1 val acceptor = new Acceptor(endpoint, sendBufferSize, recvBufferSize, brokerId, connectionQuotas)

              单个 acceptor 持有numNetworkThreads 个Processor
        2.1.2 addProcessors(acceptor, endpoint, numNetworkThreads)
              for(int i=0;i<numNetworkThreads;i++){
                  每个process 拥有自己的selector 用于从连接中读取请求与写回响应  processor 会将请求发送至requestChannel 会从responseChannels 中读取响应
                  val processor = newProcessor(nextProcessorId, connectionQuotas, listenerName, securityProtocol, memoryPool)
                  1.processor 添加到 requeChannel.processors 中  requeChannel = new RequestChannel(maxQueuedRequests) maxQueuedRequests 配置着队列的最大容量
                  2.processor 添加到 socketServer.processors 中
                  3.processor 添加到 acceptor 中 acceptor.addProcessors(listenerProcessors)
              }
         2.1.3 启动acceptor 线程
              acceptor注册OP_ACCEPT 事件  serverChannel.register(nioSelector, SelectionKey.OP_ACCEPT)
              while(ture){
                //轮询selector 直到有channels 准备好I/O 或者超时 500ms
                val ready = nioSelector.select(500)
                //源码使用 iterator
                for (int i = 0 ;i< nioSelector.selectedKeys();i++){
                  iter.remove() //从集合中删除 防止该key的channel 可以接受新的socket 连接
                  var processor = processprs[currentProcessor % processors.size]  //round robin 算法计算processor
                  accept(key, processor) //将key对应的连接分配给指定的processor
                    1.配置 socketChannel 设置为非阻塞模式 设置tcp_nodelay选项 禁止nagle 算法 设置保活模式 长时间没有发送心跳则 发出rst包重置连接 设置的socket.send.buffer.bytes
                    2.processor.accept(socketChannel) //将配置好的socketChannel给加入processor内部 的并发队列 newConnections 中 concurrentLinkedQueue
                }
              }
        2.1.4 acceptors.put(endpoint, acceptor) 映射endpoint 与 acceptor 的关系
        2.1.5 启动processors 线程
              //将socketChannel 注册OP_READ到selector上
              configureNewConnections()
              //处理缓存响应 从responseQueue 中poll() 获取response
              //1.selector.send(responseSend)
              //2. 将response 以key-value的形式存入map（inflightResponses） inflightResponses += (connectionId -> response)
              processNewResponses()
              //轮询 从selector 中获取准备好I/O 的事件
              poll()
              //将request 放入requestQueue requestChannel.sendRequest(request)->requestQueue.put(request) [ requestQueue = new ArrayBlockingQueue[BaseRequest](queueSize)]
              //将channel 放入explicitlyMutedChannels.add(channel)
              processCompletedReceives()
              //遍历completedSends
              //从inflightResponses 获取到response
              //从explicitlyMutedChannels中移除 channel
              processCompletedSends()
